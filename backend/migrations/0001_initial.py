# Generated by Django 3.0.7 on 2020-12-02 15:57

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='VibroUser',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True,
                                                max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True,
                                               max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(
                    default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(
                    default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.IntegerField(blank=True, null=True)),
                ('ext', models.IntegerField(blank=True, null=True)),
                ('celphone_one', models.IntegerField(blank=True, null=True)),
                ('celphone_two', models.IntegerField(blank=True, null=True)),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('engineer', 'Engineer'), (
                    'client', 'Client'), ('support', 'Support')], default='client', max_length=8)),
                ('certifications', django.contrib.postgres.fields.ArrayField(
                    base_field=models.CharField(max_length=50), default=list, max_length=5, size=None)),
                ('picture', models.ImageField(
                    default='default.jpg', upload_to='profile')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Axis',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('type_axis', models.CharField(choices=[('Dezlizamiento', 'Dezlizamiento'), (
                    'Rodamiento', 'Rodamiento')], default='Undefined', max_length=13)),
                ('velocity', models.IntegerField()),
                ('units', models.CharField(choices=[
                    ('rpm', 'rpm'), ('Hz', 'Hz')], default='rpm', max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('state', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'unique_together': {('name', 'state')},
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('nit', models.CharField(max_length=15, unique=True)),
                ('address', models.CharField(blank=True, max_length=50, null=True)),
                ('rut_address', models.CharField(
                    blank=True, max_length=50, null=True)),
                ('pbx', models.IntegerField(blank=True, null=True)),
                ('hierarchy', django.contrib.postgres.fields.ArrayField(
                    base_field=models.CharField(max_length=50), default=list, size=None)),
                ('city', models.ForeignKey(blank=True, null=True,
                                           on_delete=django.db.models.deletion.SET_NULL, related_name='company', to='backend.City')),
                ('rut_city', models.ForeignKey(blank=True, null=True,
                                               on_delete=django.db.models.deletion.SET_NULL, related_name='ruts', to='backend.City')),
            ],
        ),
        migrations.CreateModel(
            name='Coupling',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Date',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                              related_name='date', to='backend.Company')),
            ],
            options={
                'unique_together': {('company', 'date')},
            },
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('code', models.CharField(blank=True, choices=[
                 ('sap', 'Sap'), ('int', 'Interno')], max_length=3, null=True)),
                ('electric_feed', models.CharField(blank=True, choices=[
                 ('sap', 'Sap'), ('int', 'Interno')], max_length=3, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('power', models.IntegerField(default=0)),
                ('power_units', models.CharField(choices=[
                 ('kW', 'KiloWatts'), ('HP', 'HorsePower')], default='kW', max_length=2)),
                ('norm', models.TextField(blank=True, null=True)),
                ('hierarchy', models.IntegerField(default=0)),
                ('rpm', models.IntegerField(blank=True, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                              related_name='machines', to='backend.Company')),
            ],
            options={
                'unique_together': {('name', 'company')},
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('pred', 'Predictivo'), ('corr', 'Correctivo'), (
                    'eng', 'Ingenieria'), ('mon', 'Monitoreo en Linea')], default='pred', max_length=4)),
                ('measurement_type', models.CharField(choices=[('ult', 'Ultrasonido'), ('ter', 'Termografia'), ('vib', 'Vibracion'), ('adc', 'Analisis de Aceite'), ('pol', 'Alineacion Laser Polea'), ('tdb', 'Tencion de Bandas'), ('cmp', 'Correccion Montajes Poleas'), ('acp', 'Alineacion Laser Acople'), (
                    'crd', 'Alineacion Laser Cardan'), ('egr', 'Alineacion Engranes'), ('adr', 'Alineacion Rodamientos'), ('bal', 'Balanceo'), ('cme', 'Chequeo Mecanico'), ('mes', 'Medicion Especial'), ('ayc', 'Aire y Caudal'), ('sum', 'Suministro')], default='vib', max_length=3)),
                ('analysis', models.TextField()),
                ('diagnostic', models.TextField()),
                ('severity', models.CharField(choices=[('red', 'Red'), ('green', 'Green'), ('yellow', 'Yellow'), (
                    'black', 'Black'), ('undefined', 'Undefined')], default='undefined', max_length=9)),
                ('revised', models.BooleanField(default=False)),
                ('resolved', models.BooleanField(default=False)),
                ('prev_changes', models.TextField(blank=True, null=True)),
                ('prev_changs_date', models.DateField(blank=True, null=True)),
                ('analyst', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                              related_name='measurements_three', to=settings.AUTH_USER_MODEL)),
                ('certifier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                related_name='measurements_four', to=settings.AUTH_USER_MODEL)),
                ('date', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                           related_name='measurements', to='backend.Date')),
                ('engineer_one', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                   related_name='measurements', to=settings.AUTH_USER_MODEL)),
                ('engineer_two', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                                   related_name='measurements_two', to=settings.AUTH_USER_MODEL)),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                              related_name='measurements', to='backend.Machine')),
            ],
            options={
                'unique_together': {('measurement_type', 'date', 'machine')},
            },
        ),
        migrations.CreateModel(
            name='TermoImage',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('image_type', models.CharField(choices=[
                 ('normal', 'Normal'), ('termal', 'Termal')], default='undefined', max_length=15)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(upload_to='termals')),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='termal_image', to='backend.Measurement')),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_type', models.CharField(choices=[
                 ('Vibración', 'Vibración'), ('Dual', 'Dual')], default='Vibración', max_length=9)),
                ('sensitivity', models.IntegerField()),
                ('channel', models.IntegerField()),
                ('arduino', models.CharField(max_length=50, unique=True)),
                ('machine', models.ForeignKey(blank=True, null=True,
                                              on_delete=django.db.models.deletion.SET_NULL, related_name='sensor', to='backend.Machine')),
            ],
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField()),
                ('direction', models.CharField(choices=[('V', 'Vertical'), ('H', 'Horizontal'), (
                    'A', 'Axial'), ('O', 'Ortogonal')], default='undefined', max_length=1)),
                ('point_type', models.CharField(choices=[('V', 'Velocity'), ('A', 'Acceleration'), ('D', 'Displacement'), (
                    'T', 'Temperature'), ('E', 'Envol'), ('H', 'HFD'), ('M', 'Manual'), ('C', 'Calculado')], default='undefined', max_length=1)),
                ('tendency', models.DecimalField(
                    decimal_places=2, default=0, max_digits=4)),
                ('espectra', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(
                    decimal_places=2, max_digits=4), default=list, size=None)),
                ('time_signal', django.contrib.postgres.fields.ArrayField(
                    base_field=models.DecimalField(decimal_places=2, max_digits=4), default=list, size=None)),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='points', to='backend.Measurement')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='machines/images')),
                ('diagram', models.ImageField(upload_to='machines/diagrams')),
                ('machine', models.OneToOneField(
                    on_delete=django.db.models.deletion.CASCADE, related_name='images', to='backend.Machine')),
            ],
        ),
        migrations.CreateModel(
            name='Gear',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('gear_type', models.CharField(choices=[('Motor Eléctrico', 'Motor Eléctrico'), ('Motor Diesel', 'Motor Diesel'), ('Ventilador', 'Ventilador'), ('Bombda', 'Bombda'), ('Compresor', 'Compresor'), ('Generador', 'Generador'), (
                    'Soplador', 'Soplador'), ('Molino', 'Molino'), ('Pelet', 'Pelet'), ('Zaranda', 'Zaranda'), ('Estructura', 'Estructura'), ('Extrusora', 'Extrusora'), ('Reductora', 'Reductora')], default='N/A', max_length=20)),
                ('support', models.CharField(choices=[
                 ('Rigido', 'Rigido'), ('Flexible', 'Flexible')], default='N/A', max_length=10)),
                ('transmission', models.CharField(choices=[('Flexibles', 'Flexibles'), ('Engranaje', 'Engranaje'), ('Cadena', 'Cadena'), ('Rejilla', 'Rejilla'), ('Morflex', 'Morflex'), (
                    'Paraflex', 'Paraflex'), ('Araña', 'Araña'), ('Pasador', 'Pasador'), ('Laminilla', 'Laminilla'), ('Rigido', 'Rigido')], default='N/A', max_length=12)),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                              related_name='gears', to='backend.Machine')),
            ],
        ),
        migrations.CreateModel(
            name='Flaw',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('flaw_type', models.CharField(choices=[('bn', 'Bien'), ('bal', 'Balanceo'), ('ali', 'Alineacion'), ('ten', 'Tension'), ('lub', 'Lubricacion'), ('rod', 'Rodamientos'), ('hol', 'Holgura'), ('exc', 'Excentricidad'), (
                    'sol', 'Soltura'), ('fra', 'Fractura'), ('vac', 'Vacio'), ('ele', 'Electrico'), ('ins', 'Inspeccion'), ('est', 'Estructural'), ('res', 'Resonancia'), ('nom', 'No medido'), ('otr', 'Otro')], default='otr', max_length=3)),
                ('severity', models.CharField(choices=[('red', 'Red'), ('green', 'Green'), (
                    'yellow', 'Yellow'), ('black', 'Black')], default='black', max_length=9)),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                  related_name='flaws', to='backend.Measurement')),
            ],
        ),
        migrations.CreateModel(
            name='Bearing',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(default='N/A', max_length=30)),
                ('frequency', models.CharField(choices=[
                 ('N/A', 'N/A'), ('BPFI', 'BPFI'), ('BPFO', 'BPFO'), ('BSF', 'BSF'), ('FTF', 'FTF')], default='N/A', max_length=4)),
                ('axis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                           related_name='bearings', to='backend.Axis')),
            ],
        ),
        migrations.AddField(
            model_name='axis',
            name='gear',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name='axis', to='backend.Gear'),
        ),
        migrations.AddField(
            model_name='vibrouser',
            name='company',
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user', to='backend.Company'),
        ),
        migrations.AddField(
            model_name='vibrouser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                         related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='vibrouser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set',
                                         related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
