# Generated by Django 3.0.7 on 2021-01-16 23:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='VibroUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(default='', max_length=17, validators=[django.core.validators.RegexValidator(message='El número de teléfono debe ser ingresado en el formato: (+xxx) xxx xxxx ext xxx siendo el código de área y la extensión opcionales.', regex='^((\\(\\+?\\d{2,3}\\))|(\\+?\\d{2,3})[\\s\\-])?\\d{3}[\\s\\-]\\d{4}([\\s\\-]ext[\\s\\-]\\d{1,3})?$')])),
                ('celphone', models.CharField(default='', max_length=20, validators=[django.core.validators.RegexValidator(message='El número de celular debe ser ingresado en el formato: (+xxx) xxx xxxx xxxx siendo el código de país opcional', regex='^(((\\(\\+?\\d{2,3}\\))|(\\+?\\d{2,3}))[\\s\\-])?\\d{3}[\\-\\s]\\d{3}[\\-\\s]\\d{4}$')])),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('engineer', 'Engineer'), ('client', 'Client'), ('support', 'Support'), ('arduino', 'Arduino')], default='client', max_length=8)),
                ('certifications', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, max_length=5, size=None)),
                ('picture', models.ImageField(default='profile/default.png', upload_to='profile')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Axis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_axis', models.CharField(choices=[('deslizamiento', 'Deslizamiento'), ('rodamiento', 'Rodamiento')], default='undefined', max_length=13)),
                ('velocity', models.IntegerField()),
                ('units', models.CharField(choices=[('rpm', 'rpm'), ('Hz', 'Hz')], default='rpm', max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('state', models.CharField(max_length=30)),
            ],
            options={
                'unique_together': {('name', 'state')},
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('nit', models.CharField(max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='El número NIT debe ser ingresado en el formato: xxxxxxxxx-x', regex='^[0-9]+-{1}[0-9]{1}$')])),
                ('address', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='La dirección ingresada debe ser valida para Colombia', regex='^(Autopista|Avenida|Avenida Calle|Avenida Carrera|Avenida|Carrera|Calle|Carrera|Circunvalar|Diagonal|Kilometro|Transversal|AUTOP|AV|AC|AK|CL|KR|CCV|DG|KM|TV)(\\s)?([a-zA-Z]{0,15}|[0-9]{1,3})(\\s)?[a-zA-Z]?(\\s)?(bis)?(\\s)?(Este|Norte|Occidente|Oeste|Sur)?(\\s)?(#(\\s)?[0-9]{1,2}(\\s)?[a-zA-Z]?(\\s)?(bis)?(\\s)?(Este|Norte|Occidente|Oeste|Sur)?(\\s)?(-)?(\\s)?[0-9]{1,3}(\\s)?(Este|Norte|Occidente|Oeste|Sur)?)?((\\s)?(Agrupación|Altillo|Apartamento|Apartamento Sótano|Barrio|Bloque|Bodega|Cabecera Municipal|Callejón|Camino|Carretera|Casa|Caserio|Célula|Centro|Centro Comercial|Centro Urbano|Circular|Condominio|Conjunto|Consultorio|Corregimiento|Deposito|Deposito |Sótano|Edificio|Entrada|Esquina|Etapa|Finca|Garaje|Garaje Sótano|Grada|Inferior|Inspección de Policia|Interior|Kilometro|Local|Local Mezzanine|Local Sótano|Lote|Manzana|Manzanita|Mejora|Mezzanine|Módulo|Municipio|Núcleo|Oficina|Oficina Sótano|Parcela|Parcelación|Pasaje|Penthouse|Piso|Porteria|Predio|Principal|Puente|Quebrada|Salon|Sector|Semisótano|Suite|Supermanzana|Terraza|Torre|Troncal|Unidad|Urbanización|Vereda|Via|Zona|AGN|AL|APTO|AS|BR|BL|BG|CM|CLJ|CN|CT|CA|CAS|CEL|CE|CECO|CEUR|CIR|CDM|CONJ|CS|CO|DP|DS|ED|EN|ESQ|ET|FCA|GJ|GS|GR|INF|IP|IN|KM|LC|LM|LS|LT|MZ|MZTA|MJ|MN|MD|MUN|NCO|OF|OS|PA|PCN|PSJ|PH|PI|PT|PD|PPAL|PN|QDA|SA|SEC|SS|SU|SMZ|TZ|TO|TRL|UN|URB|VDA|VIA|ZN)?(\\s)?[1-9][0-9]{0,3})*$')])),
                ('phone', models.CharField(default='', max_length=17, validators=[django.core.validators.RegexValidator(message='El número de teléfono debe ser ingresado en el formato: (+xxx) xxx xxxx ext xxx siendo el código de área y la extensión opcionales.', regex='^((\\(\\+?\\d{2,3}\\))|(\\+?\\d{2,3})[\\s\\-])?\\d{3}[\\s\\-]\\d{4}([\\s\\-]ext[\\s\\-]\\d{1,3})?$')])),
                ('hierarchy', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, size=None)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company', to='backend.City')),
            ],
        ),
        migrations.CreateModel(
            name='Coupling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.IntegerField(null=True)),
                ('name', models.CharField(max_length=50)),
                ('code', models.CharField(choices=[('sap', 'Sap'), ('interno', 'Interno')], max_length=7, null=True)),
                ('electric_feed', models.CharField(choices=[('sap', 'Sap'), ('interno', 'Interno')], max_length=8, null=True)),
                ('brand', models.CharField(max_length=50)),
                ('power', models.IntegerField(default=0)),
                ('power_units', models.CharField(choices=[('kW', 'KiloWatts'), ('HP', 'HorsePower')], default='kW', max_length=2)),
                ('norm', models.TextField(null=True)),
                ('hierarchy', models.IntegerField(default=0)),
                ('rpm', models.IntegerField(null=True)),
                ('image', models.ImageField(null=True, upload_to='machines/images')),
                ('diagram', models.ImageField(null=True, upload_to='machines/diagrams')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='machines', to='backend.Company')),
            ],
            options={
                'unique_together': {('name', 'company')},
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(choices=[('predictivo', 'Predictivo'), ('correctivo', 'Correctivo'), ('ingeniería', 'Ingeniería'), ('monitoreo en línea', 'Monitoreo en Línea')], default='predictivo', max_length=18)),
                ('measurement_type', models.CharField(choices=[('ultrasonido', 'Ultrasonido'), ('termografía', 'Termografía'), ('vibración', 'Vibración'), ('análisis de aceite', 'Análisis de Aceite'), ('alineacion laser polea', 'Alineacion Laser Polea'), ('tensión de bandas', 'Tensión de Bandas'), ('correción montajes poleas', 'Correción Montajes Poleas'), ('alineación laser acople', 'Alineación Laser Acople'), ('alineación laser cardan', 'Alineación Laser Cardan'), ('alineación engranes', 'Alineación Engranes'), ('alineación rodamientos', 'Alineación Rodamientos'), ('balanceo', 'Balanceo'), ('chequeo mecánico', 'Chequeo Mecánico'), ('medición especial', 'Medición Especial'), ('aire y caudal', 'Aire y Caudal'), ('suministro', 'Suministro')], default='vibración', max_length=25)),
                ('date', models.DateField()),
                ('analysis', models.TextField()),
                ('diagnostic', models.TextField()),
                ('severity', models.CharField(choices=[('red', 'Red'), ('green', 'Green'), ('yellow', 'Yellow'), ('black', 'Black')], default='black', max_length=9)),
                ('revised', models.BooleanField(default=False)),
                ('resolved', models.BooleanField(default=False)),
                ('prev_changes', models.TextField(null=True)),
                ('prev_changes_date', models.DateField(null=True)),
                ('analyst', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='measurements_three', to=settings.AUTH_USER_MODEL)),
                ('certifier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='measurements_four', to=settings.AUTH_USER_MODEL)),
                ('engineer_one', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='measurements', to=settings.AUTH_USER_MODEL)),
                ('engineer_two', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='measurements_two', to=settings.AUTH_USER_MODEL)),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='backend.Machine')),
            ],
            options={
                'unique_together': {('measurement_type', 'date', 'machine')},
            },
        ),
        migrations.CreateModel(
            name='Point',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)])),
                ('direction', models.CharField(choices=[('V', 'Vertical'), ('H', 'Horizontal'), ('A', 'Axial'), ('O', 'Ortogonal')], default='undefined', max_length=1)),
                ('point_type', models.CharField(choices=[('V', 'Velocidad'), ('A', 'Aceleración'), ('D', 'Desplazamiento'), ('T', 'Temperatura'), ('E', 'Envolvente'), ('H', 'HFD'), ('M', 'Manual'), ('C', 'Calculado')], default='undefined', max_length=1)),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to='backend.Machine')),
            ],
        ),
        migrations.CreateModel(
            name='Values',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tendency', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('espectra', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=2, max_digits=4), default=list, size=None)),
                ('time_signal', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=2, max_digits=4), default=list, size=None)),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='backend.Measurement')),
                ('point', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='backend.Point')),
            ],
        ),
        migrations.CreateModel(
            name='TermoImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_type', models.CharField(choices=[('normal', 'Normal'), ('termal', 'Termal')], default='undefined', max_length=15)),
                ('description', models.TextField(null=True)),
                ('image', models.ImageField(upload_to='termals')),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='termal_image', to='backend.Measurement')),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_type', models.CharField(choices=[('vibración', 'Vibración'), ('dual', 'Dual')], default='vibración', max_length=9)),
                ('sensitivity', models.IntegerField()),
                ('channel', models.IntegerField()),
                ('arduino', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensor', to=settings.AUTH_USER_MODEL)),
                ('machine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sensor', to='backend.Machine')),
            ],
        ),
        migrations.CreateModel(
            name='Gear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gear_type', models.CharField(choices=[('motor eléctrico', 'Motor Eléctrico'), ('motor diesel', 'Motor Diesel'), ('ventilador', 'Ventilador'), ('bomba', 'Bombda'), ('compresor', 'Compresor'), ('generador', 'Generador'), ('soplador', 'Soplador'), ('molino', 'Molino'), ('pelet', 'Pelet'), ('zaranda', 'Zaranda'), ('estructura', 'Estructura'), ('extrusora', 'Extrusora'), ('reductora', 'Reductora')], default='N/A', max_length=20)),
                ('support', models.CharField(choices=[('rígido', 'Rígido'), ('Flexible', 'Flexible')], default='N/A', max_length=10)),
                ('transmission', models.CharField(choices=[('flexibles', 'Flexibles'), ('engranaje', 'Engranaje'), ('cadena', 'Cadena'), ('rejilla', 'Rejilla'), ('morflex', 'Morflex'), ('paraflex', 'Paraflex'), ('araña', 'Araña'), ('pasador', 'Pasador'), ('laminilla', 'Laminilla'), ('rígido', 'Rígido')], default='N/A', max_length=12)),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gears', to='backend.Machine')),
            ],
        ),
        migrations.CreateModel(
            name='Flaw',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flaw_type', models.CharField(choices=[('bien', 'Bien'), ('balanceo', 'Balanceo'), ('alineación', 'Alineación'), ('tensión', 'Tensión'), ('lubricación', 'Lubricación'), ('rodamientos', 'Rodamientos'), ('holgura', 'Holgura'), ('excentricidad', 'Excentricidad'), ('soltura', 'Soltura'), ('fractura', 'Fractura'), ('vacío', 'Vacío'), ('eléctrico', 'Eléctrico'), ('inspección', 'Inspección'), ('estructural', 'Estructural'), ('resonancia', 'Resonancia'), ('no medido', 'No medido'), ('otro', 'Otro')], default='otro', max_length=13)),
                ('severity', models.CharField(choices=[('red', 'Red'), ('green', 'Green'), ('yellow', 'Yellow'), ('black', 'Black')], default='black', max_length=6)),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flaws', to='backend.Measurement')),
            ],
        ),
        migrations.CreateModel(
            name='Bearing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(default='N/A', max_length=30)),
                ('frequency', models.CharField(choices=[('N/A', 'N/A'), ('BPFI', 'BPFI'), ('BPFO', 'BPFO'), ('BSF', 'BSF'), ('FTF', 'FTF')], default='N/A', max_length=4)),
                ('axis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bearings', to='backend.Axis')),
            ],
        ),
        migrations.AddField(
            model_name='axis',
            name='gear',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='axis', to='backend.Gear'),
        ),
        migrations.AddField(
            model_name='vibrouser',
            name='company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user', to='backend.Company'),
        ),
        migrations.AddField(
            model_name='vibrouser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='vibrouser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
